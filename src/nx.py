import networkx as nx
import matplotlib.pyplot as plt
import pandas as pd
df = pd.read_excel('Malware_name.xlsx')
rf = pd.read_excel('relation_test.xlsx')
# plt.figure(figsize= (100,1))
G = nx.MultiDiGraph()
G1 = nx.MultiDiGraph()
# G3 = nx.dodecahedral_graph()
pos ={}
years = {}
val_map={}
for i in range(1,63):
    malware_name = df[df['family'] ==i].values[:,0]
    year = df[df['family'] ==i].values[:,2][0]
    G.add_node(malware_name[0],other_name = malware_name, year = year)
    if year not in years:
        years[year] = 0
        pos[malware_name[0]] = (int(year)*5-10000,0)
        G1.add_node(year)
        pos[year] = (int(year)*5-10000,0.5)
    else:
        years[year] -=1
        pos[malware_name[0]] = (int(year)*5-10000,years[year])
    val_map[malware_name[0]] = i
# G.add_edges_from(
#     [('A', 'B'), ('A', 'C'), ('D', 'B'), ('E', 'C'), ('E', 'F'),
#      ('B', 'H'), ('B', 'G'), ('B', 'F'), ('C', 'G')])
# val_map = {'A': 1.0,
#            'D': 0.5714285714285714,
#            'H': 0.0}

values = [val_map.get(node, 0) for node in G.nodes()]

# Specify the edges you want here
# red_edges = [('A', 'C'), ('E', 'C')]
# edge_colours = ['black' if not edge in red_edges else 'red'
#                 for edge in G.edges()]
# black_edges = [edge for edge in G.edges() if edge not in red_edges]

# Need to create a layout when doing
# separate calls to draw nodes and edges
# pos = nx.spring_layout(G)
labelPos = dict([(k, (v[0],v[1]-0.5)) for k, v in pos.items()])
nx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), 
                       node_color = values, node_size = 100)
nx.draw_networkx_labels(G, labelPos,font_size=7,font_weight=200)
nx.draw_networkx_labels(G1, pos,font_size=7,font_weight=200)
# nx.draw_networkx_edges(G, pos, edgelist=red_edges, edge_color='r', arrows=True)
# nx.draw_networkx_edges(G, pos, edgelist=black_edges, arrows=False)
# nx.draw_networkx_edges(G,pos,edge_color = 'r',arrows=False)
data = rf[rf['relation']==1].values[:,0:2]
# print(data)
difyear_edge = []
sameyear_edge = []
for data_ in data:
    for node_name in G.node:
        if data_[0] in G.node[node_name]['other_name']:
            v = node_name
            v_year = G.node[node_name]['year']
        if data_[1] in G.node[node_name]['other_name']:
            u = node_name
            u_year = G.node[node_name]['year']
    if v_year<u_year:
        G.add_edge(v,u)
        difyear_edge.append((v,u))
    elif v_year > u_year:
        G.add_edge(u,v)
        difyear_edge.append((u,v))
    else :
        G.add_edge(u,v)
        sameyear_edge.append((u,v))
nx.draw_networkx_edges(G,pos,edgelist=difyear_edge,style = 'dashed',edge_color = 'r',arrows=True)
#nx.draw_networkx_edges(G,pos,edgelist=sameyear_edge,style = 'dashed',edge_color = 'r',arrows =False)
# print(G.node)
# G.add_edge()
# plt.axis('off')
# plt.xlim(0,100)
# plt.ylim(-16,1)
plt.show()